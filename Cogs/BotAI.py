import disnake
from disnake.ext import commands
import aiohttp
import asyncio
from deep_translator import GoogleTranslator
import asyncio
from g4f.client import Client
import sys
import os

LOG_CHANNEL_ID = 1298679265809924096

class BotAiCommands(commands.Cog):
    def __init__(self, bot):
        self.bot = bot


    @commands.slash_command(name="ask", description="–°–ø—Ä–æ—Å–∏—Ç–µ –≤–æ–ø—Ä–æ—Å —É –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. –ê –æ–Ω–∞ –æ—Ç–≤–µ—Ç–∏—Ç –∏ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º.")
    @commands.cooldown(1, 30, commands.BucketType.guild)
    async def ask(self, ctx, *, question: str):
        embedGeneration = disnake.Embed(
            title="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –Ω–∞—á–∞–ª–∞—Å—å:üé∞",
            description="–û–∂–∏–¥–∞–π—Ç–µ...‚è∞",
            colour=disnake.Color.orange()
        )
        embedGeneration.set_author(name="Ranny", icon_url=ctx.me.avatar.url)
        await ctx.send(embed=embedGeneration)

        try:
            async def get_ai_response():
                client = Client()
                response = await asyncio.get_event_loop().run_in_executor(
                    None,
                    lambda: client.chat.completions.create(
                        model="gpt-4o-mini",
                        messages=[{"role": "user", "content": question}],
                        web_search=False
                    )
                )
                sys.stdout = sys.__stdout__
                response_text = response.choices[0].message.content
                # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –ª–æ–≥–∏–Ω–æ–º, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                if response_text.startswith("[[Login to OpenAI ChatGPT]]()"):
                    response_text = response_text.replace("[[Login to OpenAI ChatGPT]]()\n", "")
                return "\n".join(response_text.split("\n"))

            chat_gpt_response = await get_ai_response()
        except Exception as e:
            chat_gpt_response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."

        print(chat_gpt_response)

        embedAnswer = disnake.Embed(
            description=chat_gpt_response,
            title="–û—Ç–≤–µ—Ç –æ—Ç –ò–ò:üíª",
            colour=disnake.Color.orange()
        )
        embedAnswer.set_author(name="Ranny", icon_url=ctx.me.avatar.url)
        await ctx.send(embed=embedAnswer)

        log_channel = self.bot.get_channel(LOG_CHANNEL_ID)
        if log_channel:
            log_embed = disnake.Embed(
                title="–õ–æ–≥ –∫–æ–º–∞–Ω–¥—ã",
                description=f"**ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** {ctx.author.id}\n"
                            f"**–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** {ctx.author.name}\n"
                            f"**–°–µ—Ä–≤–µ—Ä:** {ctx.guild.name}\n"
                            f"**–í–æ–ø—Ä–æ—Å:** {question}\n"
                            f"**–û—Ç–≤–µ—Ç –ò–ò:** {chat_gpt_response}",
                colour=disnake.Color.orange()
            )
            if ctx.guild.icon:
                log_embed.set_thumbnail(url=ctx.guild.icon.url)
            await log_channel.send(embed=log_embed)
        else:
            print("–ö–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # @commands.slash_command(name="ask", description="–°–ø—Ä–æ—Å–∏—Ç–µ –≤–æ–ø—Ä–æ—Å —É –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. –ê –æ–Ω–∞ –æ—Ç–≤–µ—Ç–∏—Ç –∏ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º.")
    # async def ask(self, ctx, *, question: str):
    #     embedDisabled = disnake.Embed(
    #         title="–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –∫–æ–º–∞–Ω–¥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞...üò•",
    #         description="–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –∫–æ–º–∞–Ω–¥–∞ 'ask' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –°–µ—Ä–≤–∏—Å, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–π –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–ª–∞ –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –Ø –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—é –µ–≥–æ –∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å—Ä–∞–∑—É "
    #                     "–≤–µ—Ä–Ω—É –∫–æ–º–∞–Ω–¥—É! –ü–æ–¥—Ä–æ–±–Ω–µ–µ —á–∏—Ç–∞–π—Ç–µ –≤ –∫–∞–Ω–∞–ª–µ —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ –±–æ—Ç–∞. –ò–∑-–∑–∞ —Ç–æ–≥–æ, —á—Ç–æ —è –∂–∏–≤—É –≤ –†–æ—Å—Å–∏–∏, —Ç–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤ –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –¥–æ–≤–æ–ª—å–Ω–æ –º–∞–ª–æ. –ü—Ä–æ—à—É –ø–æ–Ω—è—Ç—å –∏ –ø—Ä–æ—Å—Ç–∏—Ç—å",
    #         colour=disnake.Color.red()
    #     )
    #     embedDisabled.set_author(name="Ranny", icon_url=ctx.me.avatar.url)

    #     await ctx.send(embed=embedDisabled)


    @commands.slash_command(name="imagine", description="–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ª—é–±–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É.")
    @commands.cooldown(1, 60, commands.BucketType.guild)
    async def imagine(self, ctx, *, prompt: str):
        log_channel_id = 1298679265809924096
        prompt = GoogleTranslator(source='auto', target="en").translate(prompt)
        API_KEY = "53rbb_cp3MqgekjoxJJKLQ"
        payload = {
            'models': ['Anything Diffusion'],
            "prompt": prompt,
            "params": {
                "width": 512,
                "height": 512,
                "steps": 30,
                "sampler_name": "k_lms"
            },
            "nsfw": False,
            "censor_nsfw": True,
            "trusted_workers": True
        }
        headers = {
            "apikey": API_KEY,
            "Content-Type": "application/json"
        }

        await ctx.response.defer()

        async with aiohttp.ClientSession() as session:
            async with session.post("https://stablehorde.net/api/v2/generate/async", json=payload,
                                    headers=headers) as response:
                if response.status == 202:
                    embedGeneration = disnake.Embed(
                        title="–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...‚ú®", description="–û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª—å—à–µ –º–∏–Ω—É—Ç—ã ‚è∞")
                    embedGeneration.set_author(name="Ranny", icon_url=ctx.me.avatar.url)

                    await ctx.edit_original_response(embed=embedGeneration)
                    data = await response.json()
                    request_id = data.get("id")
                    print("ID –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:", request_id)
                else:
                    embederror = disnake.Embed(
                        title="–û—à–∏–±–∫–∞!üò≠")
                    embederror.set_author(name="Ranny", icon_url=ctx.me.avatar.url)
                    await ctx.edit_original_response(embed=embederror)
                    return

            while True:
                async with session.get(f"https://stablehorde.net/api/v2/generate/status/{request_id}",
                                       headers=headers) as status_response:
                    status_data = await status_response.json()

                    if status_data.get("done"):
                        image_url = status_data['generations'][0]['img']
                        if image_url:
                            await ctx.send(content=image_url)
                            await self.log_generation(ctx, prompt, image_url, log_channel_id)
                        else:
                            embedError2 = disnake.Embed(
                                title="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.üò•")
                            embedError2.set_author(name="Ranny", icon_url=ctx.me.avatar.url)
                            await ctx.edit_original_response(embed=embedError2)
                        break
                    else:
                        await asyncio.sleep(10)


    async def log_generation(self, ctx, prompt, image_url, log_channel_id):
        log_channel = self.bot.get_channel(log_channel_id)
        if log_channel:
            embed = disnake.Embed(title="–õ–æ–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", color=disnake.Color.orange(),
            description=f'**ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** {ctx.author.id}\n'
                        f'**–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** {ctx.author.name}\n'
                        f'**–°–µ—Ä–≤–µ—Ä:** {ctx.guild.name}\n'
                        f'**–ó–∞–ø—Ä–æ—Å:** {prompt}\n')
            if ctx.guild.icon:
                embed.set_thumbnail(url=ctx.guild.icon.url)
            await log_channel.send(embed=embed)
            await  log_channel.send(image_url)


def setup(bot):
    bot.add_cog(BotAiCommands(bot))
