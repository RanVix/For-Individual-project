import disnake
from disnake.ext import commands
import random
from deep_translator import GoogleTranslator
import segno
import os
import tempfile

class BotToolsCommands(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
    @commands.slash_command(name="random", description="–í—ã–≤–æ–¥–∏—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–æ–∑–æ–Ω–µ.")
    async def random(self, interaction: disnake.CommandInteraction, min: int, max: int):
        if min >= max:
            embedEr = disnake.Embed(title="–û—à–∏–±–∫–∞!üò•",
                                    description="–ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–≥–æ.",
                                    colour=disnake.Color.orange())
            embedEr.set_author(name="Ranny", icon_url=interaction.me.avatar.url)
            await interaction.send(embed=embedEr, ephemeral=True)
            return
        number = random.randint(min, max)
        embedEr = disnake.Embed(title="–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æüé∞",
                                description=f'–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç {min} –¥–æ {max}: {number}',
                                colour=disnake.Color.orange())
        embedEr.set_author(name="Ranny", icon_url=interaction.me.avatar.url)
        await interaction.send(embed=embedEr)

    @commands.slash_command(name='translate', description='–ü–µ—Ä–µ–≤–µ–¥–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —è–∑—ã–∫.')
    async def translate(self, interaction: disnake.CommandInteraction, text: str, dest_language: str):
        await interaction.response.defer()

        # –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤—ã—Ö –∫–æ–¥–æ–≤
        supported_languages = ['en', 'es', 'fr', 'de', 'ru', 'zh', 'ja', 'it']  # –∏ –¥—Ä—É–≥–∏–µ

        if dest_language not in supported_languages:
            embedEr = disnake.Embed(title="–û—à–∏–±–∫–∞!üò•",
                                    description=f'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —è–∑—ã–∫–æ–≤–æ–π –∫–æ–¥: {dest_language}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ–¥–æ–≤: {", ".join(supported_languages)}.',
                                    colour=disnake.Color.orange())
            embedEr.set_author(name="Ranny", icon_url=interaction.me.avatar.url)
            await interaction.send(embed=embedEr, ephemeral=True)
            return

        try:
            translated = GoogleTranslator(source='auto', target=dest_language).translate(text)

            embedEr = disnake.Embed(title="–ü–µ—Ä–µ–≤–æ–¥üîä",
                                    description=f'–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {translated}',
                                    colour=disnake.Color.orange())
            embedEr.set_author(name="Ranny", icon_url=interaction.me.avatar.url)
            await interaction.send(embed=embedEr)
        except Exception as e:
            embedEr = disnake.Embed(title="–û—à–∏–±–∫–∞!üò•", colour=disnake.Color.orange())
            embedEr.set_author(name="Ranny", icon_url=interaction.me.avatar.url)
            await interaction.send(embed=embedEr, ephemeral=True)
            print(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {str(e)}')


    @commands.slash_command(name='qrcode', description='–°–æ–∑–¥–∞–µ—Ç qrcode –∏–∑ –≤–∞—à–µ–≥–æ —Ç–µ–∫—Å—Ç–∞!')
    async def qrcode_command(self, interaction: disnake.ApplicationCommandInteraction, text: str):
        qr = segno.make(text, error='h')

        tmp_file_path = os.path.join(tempfile.gettempdir(), "qrcode.png")
        qr.save(tmp_file_path, scale=4)

        await interaction.send("–í–æ—Ç –≤–∞—à QR-–∫–æ–¥:", file=disnake.File(tmp_file_path))

        os.remove(tmp_file_path)

def setup(bot):
    bot.add_cog(BotToolsCommands(bot))